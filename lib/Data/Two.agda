{-# OPTIONS --without-K #-}
module Data.Two where

open import Type hiding (โ)
open import Data.Product using (_ร_; _,_)
import Data.Bool.NP as Bool
open Bool public hiding (if_then_else_; cond) renaming (Bool to ๐; false to 0โ; true to 1โ; toโ to ๐โนโ; toโโค1 to ๐โค1)

[0โ_,1โ_] : โ {a} {A : โ a} โ A โ A โ ๐ โ A
[0โ eโ ,1โ eโ ] b = Bool.if b then eโ else eโ

case_0โ_1โ_ : โ {a} {A : โ a} โ ๐ โ A โ A โ A
case b 0โ eโ 1โ eโ = [0โ eโ ,1โ eโ ] b

proj : โ {a} {A : ๐ โ โ a} โ A 0โ ร A 1โ โ (b : ๐) โ A b
proj (xโ , xโ) 0โ = xโ
proj (xโ , xโ) 1โ = xโ

projโฒ : โ {a} {A : โ a} โ A ร A โ ๐ โ A
projโฒ = proj
