{-# OPTIONS --universe-polymorphism #-}
-- This is an example of the use of logical relations
module Data.Bool.NatBool where

open import Data.Nat
open import Relation.Nullary
open import Relation.Binary.Logical
open import Level
import Data.Bool

record BOOL : Set‚ÇÅ where
  constructor mkBOOL
  field
    B           : Set
    true false  : B
    _‚à®_         : B ‚Üí B ‚Üí B

module Implem where
  ‚ÑïBool : Set
  ‚ÑïBool = ‚Ñï

  false : ‚ÑïBool
  false = 0

  true : ‚ÑïBool
  true = 1

  _‚à®_ : ‚ÑïBool ‚Üí ‚ÑïBool ‚Üí ‚ÑïBool
  m ‚à® n = m + n

  -- this function breaks the abstraction/model
  is4? : ‚ÑïBool ‚Üí ‚ÑïBool
  is4? 4 = true
  is4? _  = false

  bool : BOOL
  bool = mkBOOL ‚ÑïBool true false _‚à®_

module Model where
  open Implem

  data ‚ü¶‚ÑïBool‚üß : (x y : ‚ÑïBool) ‚Üí Set where
    ‚ü¶false‚üß : ‚ü¶‚ÑïBool‚üß 0 0
    ‚ü¶true‚üß  : ‚àÄ {m n} ‚Üí ‚ü¶‚ÑïBool‚üß (suc m) (suc n)

  _‚ü¶‚à®‚üß_ : (‚ü¶‚ÑïBool‚üß ‚ü¶‚Üí‚üß ‚ü¶‚ÑïBool‚üß ‚ü¶‚Üí‚üß ‚ü¶‚ÑïBool‚üß) _‚à®_ _‚à®_
  ‚ü¶false‚üß  ‚ü¶‚à®‚üß  x = x
  ‚ü¶true‚üß   ‚ü¶‚à®‚üß  _ = ‚ü¶true‚üß

  ¬¨‚ü¶is4?‚üß : ¬¨((‚ü¶‚ÑïBool‚üß ‚ü¶‚Üí‚üß ‚ü¶‚ÑïBool‚üß) is4? is4?)
  ¬¨‚ü¶is4?‚üß ‚ü¶is4?‚üß with ‚ü¶is4?‚üß {4} {3} ‚ü¶true‚üß
  ...               | ()

reference : BOOL
reference = mkBOOL Ref.Bool Ref.true Ref.false Ref._‚à®_
  where module Ref = Data.Bool

record BOOL-Sound (bool : BOOL) : Set‚ÇÅ where
  constructor mk‚ü¶BOOL‚üß
  open BOOL bool
  field
    ‚ü¶B‚üß      : ‚ü¶Set‚ÇÄ‚üß B B
    ‚ü¶true‚üß   : ‚ü¶B‚üß true true
    ‚ü¶false‚üß  : ‚ü¶B‚üß false false
    _‚ü¶‚à®‚üß_    : (‚ü¶B‚üß ‚ü¶‚Üí‚üß ‚ü¶B‚üß ‚ü¶‚Üí‚üß ‚ü¶B‚üß) _‚à®_ _‚à®_

reference-sound : BOOL-Sound reference
reference-sound = mk‚ü¶BOOL‚üß _‚â°_ refl refl _‚ü¶‚à®‚üß_
  where module Ref = Data.Bool
        open import Relation.Binary.PropositionalEquality
        _‚ü¶‚à®‚üß_ : (_‚â°_ ‚ü¶‚Üí‚üß _‚â°_ ‚ü¶‚Üí‚üß _‚â°_) Ref._‚à®_ Ref._‚à®_
        _‚ü¶‚à®‚üß_ refl refl = refl

BOOL-sound : BOOL-Sound Implem.bool
BOOL-sound = mk‚ü¶BOOL‚üß ‚ü¶‚ÑïBool‚üß ‚ü¶true‚üß ‚ü¶false‚üß _‚ü¶‚à®‚üß_
  where open Implem
        open Model

record ‚ü¶BOOL‚üß (x y : BOOL) : Set‚ÇÅ where
  constructor mk‚ü¶BOOL‚üß
  module X = BOOL x
  module Y = BOOL y
  field
    ‚ü¶B‚üß      : ‚ü¶Set‚ÇÄ‚üß X.B Y.B
    ‚ü¶true‚üß   : ‚ü¶B‚üß X.true Y.true
    ‚ü¶false‚üß  : ‚ü¶B‚üß X.false Y.false
    _‚ü¶‚à®‚üß_    : (‚ü¶B‚üß ‚ü¶‚Üí‚üß ‚ü¶B‚üß ‚ü¶‚Üí‚üß ‚ü¶B‚üß) X._‚à®_ Y._‚à®_

‚ü¶Implem-bool‚üß : ‚ü¶BOOL‚üß Implem.bool Implem.bool
‚ü¶Implem-bool‚üß = mk‚ü¶BOOL‚üß ‚ü¶‚ÑïBool‚üß ‚ü¶true‚üß ‚ü¶false‚üß _‚ü¶‚à®‚üß_
  where open Implem
        open Model

‚ü¶reference‚üß : ‚ü¶BOOL‚üß reference reference
‚ü¶reference‚üß = mk‚ü¶BOOL‚üß _‚â°_ refl refl _‚ü¶‚à®‚üß_
  where module Ref = Data.Bool
        open import Relation.Binary.PropositionalEquality
        _‚ü¶‚à®‚üß_ : (_‚â°_ ‚ü¶‚Üí‚üß _‚â°_ ‚ü¶‚Üí‚üß _‚â°_) Ref._‚à®_ Ref._‚à®_
        _‚ü¶‚à®‚üß_ refl refl = refl

‚ü¶bool-ref‚üß : ‚ü¶BOOL‚üß Implem.bool reference
‚ü¶bool-ref‚üß = mk‚ü¶BOOL‚üß ‚ü¶B‚üß ‚ü¶true‚üß ‚ü¶false‚üß _‚ü¶‚à®‚üß_
  where
    open Implem    renaming (_‚à®_ to _‚à®‚ÇÅ_)
    open Data.Bool renaming (false to false‚ÇÇ; true to true‚ÇÇ; _‚à®_ to _‚à®‚ÇÇ_)

    data ‚ü¶B‚üß : ‚ÑïBool ‚Üí Bool ‚Üí Set where
      ‚ü¶false‚üß : ‚ü¶B‚üß 0 false‚ÇÇ
      ‚ü¶true‚üß  : ‚àÄ {m} ‚Üí ‚ü¶B‚üß (suc m) true‚ÇÇ

    _‚ü¶‚à®‚üß_ : (‚ü¶B‚üß ‚ü¶‚Üí‚üß ‚ü¶B‚üß ‚ü¶‚Üí‚üß ‚ü¶B‚üß) _‚à®‚ÇÅ_ _‚à®‚ÇÇ_
    ‚ü¶false‚üß  ‚ü¶‚à®‚üß  x = x
    ‚ü¶true‚üß   ‚ü¶‚à®‚üß  _ = ‚ü¶true‚üß

Client : (A : BOOL ‚Üí Set) ‚Üí Set‚ÇÅ
Client A = (bool : BOOL) ‚Üí A bool

{-
open import Data.Zero
open import Data.One

‚ü¶‚ÑïBool‚üß : (x y : ‚ÑïBool) ‚Üí Set
‚ü¶‚ÑïBool‚üß 0        0        = ùüô
‚ü¶‚ÑïBool‚üß (suc _)  (suc _)  = ùüô
‚ü¶‚ÑïBool‚üß _        _        = ùüò

_‚ü¶‚à®‚üß_ : (‚ü¶‚ÑïBool‚üß ‚ü¶‚Üí‚üß ‚ü¶‚ÑïBool‚üß ‚ü¶‚Üí‚üß ‚ü¶‚ÑïBool‚üß) _‚à®_ _‚à®_
_‚ü¶‚à®‚üß_ _ {zero} {suc _} ()
_‚ü¶‚à®‚üß_ _ {suc _} {zero} ()
_‚ü¶‚à®‚üß_ {zero} {suc _} () _
_‚ü¶‚à®‚üß_ {suc _} {zero} () _
_‚ü¶‚à®‚üß_ {zero} {zero} _ {zero} {zero} _ = _
_‚ü¶‚à®‚üß_ {zero} {zero} _ {suc _} {suc _} _ = _
_‚ü¶‚à®‚üß_ {suc _} {suc _} _ {zero} {zero} _ = _
_‚ü¶‚à®‚üß_ {suc _} {suc _} _ {suc _} {suc _} _ = _

¬¨‚ü¶is4?‚üß : ¬¨((‚ü¶‚ÑïBool‚üß ‚ü¶‚Üí‚üß ‚ü¶‚ÑïBool‚üß) is4? is4?)
¬¨‚ü¶is4?‚üß ‚ü¶is4?‚üß = ‚ü¶is4?‚üß {4} {2} _
-}
{-

import Data.Bool as B
open B using (Bool)

toBool : ‚ÑïBool ‚Üí Bool
toBool 0 = B.false
toBool _ = B.true

not : ‚ÑïBool ‚Üí ‚ÑïBool
not 0 = true
not _ = false

even : ‚ÑïBool ‚Üí ‚ÑïBool
even zero     = true
even (suc n)  = not (even n)

¬¨‚ü¶even‚üß : ¬¨((‚ü¶‚ÑïBool‚üß ‚ü¶‚Üí‚üß ‚ü¶‚ÑïBool‚üß) even even)
¬¨‚ü¶even‚üß ‚ü¶even‚üß with ‚ü¶even‚üß {1} {2} ‚ü¶true‚üß
... | ()

open import Data.Nat.Logical

to‚Ñï : ‚ÑïBool ‚Üí ‚Ñï
to‚Ñï n = n

¬¨‚ü¶to‚Ñï‚üß : ¬¨((‚ü¶‚ÑïBool‚üß ‚ü¶‚Üí‚üß ‚ü¶‚Ñï‚üß) to‚Ñï to‚Ñï)
¬¨‚ü¶to‚Ñï‚üß ‚ü¶to‚Ñï‚üß with ‚ü¶to‚Ñï‚üß {1} {2} ‚ü¶true‚üß
... | suc ()
-}
