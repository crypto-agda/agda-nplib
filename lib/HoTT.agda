{-# OPTIONS --without-K #-}
module HoTT where

open import Type
open import Level.NP
open import Function.NP
open import Function.Extensionality
open import Data.Zero using (ùüò)
open import Data.One using (ùüô)
open import Data.Product.NP renaming (proj‚ÇÅ to fst; proj‚ÇÇ to snd)
open import Data.Sum using (_‚äé_) renaming (inj‚ÇÅ to inl; inj‚ÇÇ to inr; [_,_] to [inl:_,inr:_])
open import Relation.Binary using (Reflexive; Symmetric; Transitive)
import Relation.Binary.PropositionalEquality.NP as ‚â°
open ‚â° using (_‚â°_; ap; coe; coe!; !_; _‚àô_; J) renaming (subst to tr; refl to idp; cong‚ÇÇ to ap‚ÇÇ; _‚âó_ to _‚àº_)

import Function.Inverse.NP as Inv
open Inv using (_‚Üî_; inverses; module Inverse) renaming (_$‚ÇÅ_ to to; _$‚ÇÇ_ to from)

-- Contractible
module _ {a}(A : ‚òÖ_ a) where
    Is-contr : ‚òÖ_ a
    Is-contr = Œ£ A Œª x ‚Üí ‚àÄ y ‚Üí x ‚â° y

module _ {a}{b}{A : ‚òÖ_ a}{B : A ‚Üí ‚òÖ_ b} where
    pair= : ‚àÄ {x y : Œ£ A B} ‚Üí (p : fst x ‚â° fst y) ‚Üí tr B p (snd x) ‚â° snd y ‚Üí x ‚â° y
    pair= idp = ap (_,_ _)
    snd= : ‚àÄ {x : A} {y y' : B x} ‚Üí y ‚â° y' ‚Üí _‚â°_ {A = Œ£ A B} (x , y) (x , y')
    snd= = pair= idp

    tr-snd= : ‚àÄ {p}(P : Œ£ A B ‚Üí ‚òÖ_ p){x}{y‚ÇÄ y‚ÇÅ : B x}(y= : y‚ÇÄ ‚â° y‚ÇÅ)
            ‚Üí tr P (snd= {x = x} y=) ‚àº tr (P ‚àò _,_ x) y=
    tr-snd= P idp p = idp
module _ {a}{b}{A : ‚òÖ_ a}{B : ‚òÖ_ b} where
    pair√ó= : ‚àÄ {x x' : A}(p : x ‚â° x')
               {y y' : B}(q : y ‚â° y')
             ‚Üí (x , y) ‚â° (x' , y')
    pair√ó= idp q = snd= q

module _ {a}(A : ‚òÖ_ a){b}{B‚ÇÄ B‚ÇÅ : A ‚Üí ‚òÖ_ b}(B : (x : A) ‚Üí B‚ÇÄ x ‚â° B‚ÇÅ x){{_ : FunExt}} where
    Œ£=‚Ä≤ : Œ£ A B‚ÇÄ ‚â° Œ£ A B‚ÇÅ
    Œ£=‚Ä≤ = ap (Œ£ A) (Œª= B)

    Œ†=‚Ä≤ : Œ† A B‚ÇÄ ‚â° Œ† A B‚ÇÅ
    Œ†=‚Ä≤ = ap (Œ† A) (Œª= B)

module _ {{_ : FunExt}} where
    Œ£= : ‚àÄ {a}{A‚ÇÄ A‚ÇÅ : ‚òÖ_ a}{b}{B‚ÇÄ : A‚ÇÄ ‚Üí ‚òÖ_ b}{B‚ÇÅ : A‚ÇÅ ‚Üí ‚òÖ_ b}
           (A : A‚ÇÄ ‚â° A‚ÇÅ)(B : (x : A‚ÇÄ) ‚Üí B‚ÇÄ x ‚â° B‚ÇÅ (coe A x))
         ‚Üí Œ£ A‚ÇÄ B‚ÇÄ ‚â° Œ£ A‚ÇÅ B‚ÇÅ
    Œ£= idp B = Œ£=‚Ä≤ _ B

    Œ†= : ‚àÄ {a}{A‚ÇÄ A‚ÇÅ : ‚òÖ_ a}{b}{B‚ÇÄ : A‚ÇÄ ‚Üí ‚òÖ_ b}{B‚ÇÅ : A‚ÇÅ ‚Üí ‚òÖ_ b}
           (A : A‚ÇÄ ‚â° A‚ÇÅ)(B : (x : A‚ÇÄ) ‚Üí B‚ÇÄ x ‚â° B‚ÇÅ (coe A x))
         ‚Üí Œ† A‚ÇÄ B‚ÇÄ ‚â° Œ† A‚ÇÅ B‚ÇÅ
    Œ†= idp B = Œ†=‚Ä≤ _ B

module _ {a}{A‚ÇÄ A‚ÇÅ : ‚òÖ_ a}{b}{B‚ÇÄ B‚ÇÅ : ‚òÖ_ b}(A= : A‚ÇÄ ‚â° A‚ÇÅ)(B= : B‚ÇÄ ‚â° B‚ÇÅ) where
    √ó= : (A‚ÇÄ √ó B‚ÇÄ) ‚â° (A‚ÇÅ √ó B‚ÇÅ)
    √ó= = ap‚ÇÇ _√ó_ A= B=

    ‚äé= : (A‚ÇÄ ‚äé B‚ÇÄ) ‚â° (A‚ÇÅ ‚äé B‚ÇÅ)
    ‚äé= = ap‚ÇÇ _‚äé_ A= B=

module Equivalences where

  module _ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b} where
    _LeftInverseOf_ : (B ‚Üí A) ‚Üí (A ‚Üí B) ‚Üí ‚òÖ_ a
    linv LeftInverseOf f = ‚àÄ x ‚Üí linv (f x) ‚â° x

    _RightInverseOf_ : (B ‚Üí A) ‚Üí (A ‚Üí B) ‚Üí ‚òÖ_ b
    rinv RightInverseOf f = ‚àÄ x ‚Üí f (rinv x) ‚â° x

    record Linv (f : A ‚Üí B) : ‚òÖ_(a ‚äî b) where
      field
        linv : B ‚Üí A
        is-linv : ‚àÄ x ‚Üí linv (f x) ‚â° x

    record Rinv (f : A ‚Üí B) : ‚òÖ_(a ‚äî b) where
      field
        rinv : B ‚Üí A
        is-rinv : ‚àÄ x ‚Üí f (rinv x) ‚â° x

    record Is-equiv (f : A ‚Üí B) : ‚òÖ_(a ‚äî b) where
      field
        linv : B ‚Üí A
        is-linv : ‚àÄ x ‚Üí linv (f x) ‚â° x
        rinv : B ‚Üí A
        is-rinv : ‚àÄ x ‚Üí f (rinv x) ‚â° x

      injective : ‚àÄ {x y} ‚Üí f x ‚â° f y ‚Üí x ‚â° y
      injective {x} {y} p = !(is-linv x) ‚àô ap linv p ‚àô is-linv y

      surjective : ‚àÄ y ‚Üí ‚àÉ Œª x ‚Üí f x ‚â° y
      surjective y = rinv y , is-rinv y

  module _ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b}{f : A ‚Üí B}(f·¥± : Is-equiv f) where
      open Is-equiv f·¥±
      inv : B ‚Üí A
      inv = linv ‚àò f ‚àò rinv

      inv-is-equiv : Is-equiv inv
      inv-is-equiv = record { linv = f
                         ; is-linv = Œª x ‚Üí ap f (is-linv (rinv x)) ‚àô is-rinv x
                         ; rinv = f
                         ; is-rinv = Œª x ‚Üí ap linv (is-rinv (f x)) ‚àô is-linv x }

  module _ {a b} where
    infix 4 _‚âÉ_
    _‚âÉ_ : ‚òÖ_ a ‚Üí ‚òÖ_ b ‚Üí ‚òÖ_(a ‚äî b)
    A ‚âÉ B = Œ£ (A ‚Üí B) Is-equiv

  module _ {a}{A : ‚òÖ_ a}(f : A ‚Üí A)(f-inv : f LeftInverseOf f) where
      self-inv-is-equiv : Is-equiv f
      self-inv-is-equiv = record { linv = f ; is-linv = f-inv ; rinv = f ; is-rinv = f-inv }

      self-inv-equiv : A ‚âÉ A
      self-inv-equiv = f , self-inv-is-equiv

  module _ {a}{A : ‚òÖ_ a} where
    id·¥± : Is-equiv {A = A} id
    id·¥± = self-inv-is-equiv _ Œª _ ‚Üí idp

  module _ {a b c}{A : ‚òÖ_ a}{B : ‚òÖ_ b}{C : ‚òÖ_ c}{g : B ‚Üí C}{f : A ‚Üí B} where
    _‚àò·¥±_ : Is-equiv g ‚Üí Is-equiv f ‚Üí Is-equiv (g ‚àò f)
    g·¥± ‚àò·¥± f·¥± = record { linv = F.linv ‚àò G.linv ; is-linv = Œª x ‚Üí ap F.linv (G.is-linv (f x)) ‚àô F.is-linv x
                      ; rinv = F.rinv ‚àò G.rinv ; is-rinv = Œª x ‚Üí ap g (F.is-rinv _) ‚àô G.is-rinv x }
      where
        module G = Is-equiv g·¥±
        module F = Is-equiv f·¥±

  module _ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b} where
    ‚Äì> : (e : A ‚âÉ B) ‚Üí (A ‚Üí B)
    ‚Äì> e = fst e

    <‚Äì : (e : A ‚âÉ B) ‚Üí (B ‚Üí A)
    <‚Äì e = Is-equiv.linv (snd e)

    <‚Äì-inv-l : (e : A ‚âÉ B) (a : A)
              ‚Üí (<‚Äì e (‚Äì> e a) ‚â° a)
    <‚Äì-inv-l e a = Is-equiv.is-linv (snd e) a

    {-
    <‚Äì-inv-r : (e : A ‚âÉ B) (b : B)
                ‚Üí (‚Äì> e (<‚Äì e b) ‚â° b)
    <‚Äì-inv-r e b = Is-equiv.is-rinv (snd e) b
    -}

    -- Equivalences are "injective"
    equiv-inj : (e : A ‚âÉ B) {x y : A}
                ‚Üí (‚Äì> e x ‚â° ‚Äì> e y ‚Üí x ‚â° y)
    equiv-inj e {x} {y} p = ! (<‚Äì-inv-l e x) ‚àô ap (<‚Äì e) p ‚àô <‚Äì-inv-l e y

  module _ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b}
           {f : A ‚Üí B}(g : B ‚Üí A)
           (f-g : (y : B) ‚Üí f (g y) ‚â° y)
           (g-f : (x : A) ‚Üí g (f x) ‚â° x) where
    is-equiv : Is-equiv f
    is-equiv = record { linv = g ; is-linv = g-f ; rinv = g ; is-rinv = f-g }

  module _ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b}
           (f : A ‚Üí B)(g : B ‚Üí A)
           (f-g : (y : B) ‚Üí f (g y) ‚â° y)
           (g-f : (x : A) ‚Üí g (f x) ‚â° x) where
    equiv : A ‚âÉ B
    equiv = f , is-equiv g f-g g-f

  module _ {‚Ñì} where
    ‚âÉ-refl : Reflexive (_‚âÉ_ {‚Ñì})
    ‚âÉ-refl = _ , id·¥±

    ‚âÉ-sym : Symmetric (_‚âÉ_ {‚Ñì})
    ‚âÉ-sym (_ , f·¥±) = _ , inv-is-equiv f·¥±

    ‚âÉ-trans : Transitive (_‚âÉ_ {‚Ñì})
    ‚âÉ-trans (_ , p) (_ , q) = _ , q ‚àò·¥± p

    ‚âÉ-! = ‚âÉ-sym
    _‚âÉ-‚àô_ = ‚âÉ-trans

  module _ {a}{A : ‚òÖ_ a} where
    Paths : ‚òÖ_ a
    Paths = Œ£ A Œª x ‚Üí Œ£ A Œª y ‚Üí x ‚â° y

    id-path : A ‚Üí Paths
    id-path x = x , x , idp

    fst-rinv-id-path : ‚àÄ p ‚Üí id-path (fst p) ‚â° p
    fst-rinv-id-path (x , y , p) = snd= (pair= p (J (Œª {y} p ‚Üí tr (_‚â°_ x) p idp ‚â° p) idp p))

    id-path-is-equiv : Is-equiv id-path
    id-path-is-equiv = record { linv = fst
                              ; is-linv = Œª x ‚Üí idp
                              ; rinv = fst
                              ; is-rinv = fst-rinv-id-path }

    ‚âÉ-Paths : A ‚âÉ Paths
    ‚âÉ-Paths = id-path , id-path-is-equiv

  module _ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b}(f : A ‚Üí B) where
    hfiber : (y : B) ‚Üí ‚òÖ_(a ‚äî b)
    hfiber y = Œ£ A Œª x ‚Üí f x ‚â° y

    Is-equiv-alt : ‚òÖ_(a ‚äî b)
    Is-equiv-alt = (y : B) ‚Üí Is-contr (hfiber y)

  module Is-contr-to-Is-equiv {a}{A : ‚òÖ_ a}(A-contr : Is-contr A) where
    const-is-equiv : Is-equiv (Œª (_ : ùüô) ‚Üí fst A-contr)
    const-is-equiv = record { linv = _ ; is-linv = Œª _ ‚Üí idp ; rinv = _ ; is-rinv = snd A-contr }
    ùüô‚âÉ : ùüô ‚âÉ A
    ùüô‚âÉ = _ , const-is-equiv
  module Is-equiv-to-Is-contr {a}{A : ‚òÖ_ a}(f : ùüô ‚Üí A)(f-is-equiv : Is-equiv f) where
    open Is-equiv f-is-equiv
    A-contr : Is-contr A
    A-contr = f _ , is-rinv

  module _ {a}{A : ‚òÖ_ a}{b}{B : ‚òÖ_ b} where
    iso-to-equiv : (A ‚Üî B) ‚Üí (A ‚âÉ B)
    iso-to-equiv iso = to iso , record { linv = from iso ; is-linv = Inverse.left-inverse-of iso
                                       ; rinv = from iso ; is-rinv = Inverse.right-inverse-of iso }

    equiv-to-iso : (A ‚âÉ B) ‚Üí (A ‚Üî B)
    equiv-to-iso (f , f-is-equiv) = inverses f (f·¥±.linv ‚àò f ‚àò f·¥±.rinv)
                                             (Œª x ‚Üí ap f·¥±.linv (f·¥±.is-rinv (f x)) ‚àô f·¥±.is-linv x)
                                             (Œª x ‚Üí ap f (f·¥±.is-linv (f·¥±.rinv x)) ‚àô f·¥±.is-rinv x)
      where module f·¥± = Is-equiv f-is-equiv

    {-
    iso-to-equiv-to-iso : (iso : A ‚Üî B) ‚Üí equiv-to-iso (iso-to-equiv iso) ‚â° iso
    iso-to-equiv-to-iso iso = {!!}
      where module Iso = Inverse iso

    iso-to-equiv-is-equiv : Is-equiv iso-to-equiv
    iso-to-equiv-is-equiv = record { linv = equiv-to-iso ; is-linv = {!!} ; rinv = {!!} ; is-rinv = {!!} }
    -}
open Equivalences

module _ {‚Ñì}{A : ‚òÖ_ ‚Ñì} where
    coe!-inv-r : ‚àÄ {B}(p : A ‚â° B) y ‚Üí coe p (coe! p y) ‚â° y
    coe!-inv-r idp y = idp

    coe!-inv-l : ‚àÄ {B}(p : A ‚â° B) x ‚Üí coe! p (coe p x) ‚â° x
    coe!-inv-l idp x = idp

    coe-equiv : ‚àÄ {B} ‚Üí A ‚â° B ‚Üí A ‚âÉ B
    coe-equiv p = equiv (coe p) (coe! p) (coe!-inv-r p) (coe!-inv-l p)

postulate
  UA : ‚òÖ
module _ {‚Ñì}{A B : ‚òÖ_ ‚Ñì}{{_ : UA}} where
  postulate
    ua : (A ‚âÉ B) ‚Üí (A ‚â° B)
    coe-equiv-Œ≤ : (e : A ‚âÉ B) ‚Üí coe-equiv (ua e) ‚â° e
    ua-Œ∑ : (p : A ‚â° B) ‚Üí ua (coe-equiv p) ‚â° p

  ua-equiv : (A ‚âÉ B) ‚âÉ (A ‚â° B)
  ua-equiv = equiv ua coe-equiv ua-Œ∑ coe-equiv-Œ≤

  coe-Œ≤ : (e : A ‚âÉ B) (a : A) ‚Üí coe (ua e) a ‚â° ‚Äì> e a
  coe-Œ≤ e a = ap (Œª e ‚Üí ‚Äì> e a) (coe-equiv-Œ≤ e)

module _ {{_ : UA}}{{_ : FunExt}}{a}{A‚ÇÄ A‚ÇÅ : ‚òÖ_ a}{b}{B‚ÇÄ : A‚ÇÄ ‚Üí ‚òÖ_ b}{B‚ÇÅ : A‚ÇÅ ‚Üí ‚òÖ_ b} where
    Œ£‚âÉ : (A : A‚ÇÄ ‚âÉ A‚ÇÅ)(B : (x : A‚ÇÄ) ‚Üí B‚ÇÄ x ‚â° B‚ÇÅ (‚Äì> A x))
         ‚Üí Œ£ A‚ÇÄ B‚ÇÄ ‚â° Œ£ A‚ÇÅ B‚ÇÅ
    Œ£‚âÉ A B = Œ£= (ua A) Œª x ‚Üí B x ‚àô ap B‚ÇÅ (! coe-Œ≤ A x)

    Œ†‚âÉ : (A : A‚ÇÄ ‚âÉ A‚ÇÅ)(B : (x : A‚ÇÄ) ‚Üí B‚ÇÄ x ‚â° B‚ÇÅ (‚Äì> A x))
         ‚Üí Œ† A‚ÇÄ B‚ÇÄ ‚â° Œ† A‚ÇÅ B‚ÇÅ
    Œ†‚âÉ A B = Œ†= (ua A) Œª x ‚Üí B x ‚àô ap B‚ÇÅ (! coe-Œ≤ A x)

module _ {{_ : UA}}{{_ : FunExt}}{A : ‚òÖ}{B C : A ‚Üí ‚òÖ} where
    Œ£‚äé-split : (Œ£ A (Œª x ‚Üí B x ‚äé C x)) ‚â° (Œ£ A B ‚äé Œ£ A C)
    Œ£‚äé-split = ua (equiv (Œª { (x , inl y) ‚Üí inl (x , y)
                            ; (x , inr y) ‚Üí inr (x , y) })
                         (Œª { (inl (x , y)) ‚Üí x , inl y
                            ; (inr (x , y)) ‚Üí x , inr y })
                         (Œª { (inl (x , y)) ‚Üí idp
                            ; (inr (x , y)) ‚Üí idp })
                         (Œª { (x , inl y) ‚Üí idp
                            ; (x , inr y) ‚Üí idp }))

module _ {{_ : UA}}{{_ : FunExt}}{A B : ‚òÖ}{C : A ‚Üí ‚òÖ}{D : B ‚Üí ‚òÖ} where
    dist-‚äé-Œ£-equiv : (Œ£ (A ‚äé B) [inl: C ,inr: D ]) ‚âÉ (Œ£ A C ‚äé Œ£ B D)
    dist-‚äé-Œ£-equiv = equiv (Œª { (inl x , y) ‚Üí inl (x , y)
                              ; (inr x , y) ‚Üí inr (x , y) })
                           [inl: (Œª x ‚Üí inl (fst x) , snd x)
                           ,inr: (Œª x ‚Üí inr (fst x) , snd x) ]
                           [inl: (Œª x ‚Üí idp) ,inr: (Œª x ‚Üí idp) ]
                           (Œª { (inl x , y) ‚Üí idp
                              ; (inr x , y) ‚Üí idp })

    dist-‚äé-Œ£ : (Œ£ (A ‚äé B) [inl: C ,inr: D ]) ‚â° (Œ£ A C ‚äé Œ£ B D)
    dist-‚äé-Œ£ = ua dist-‚äé-Œ£-equiv

    dist-√ó-Œ†-equiv : (Œ† (A ‚äé B) [inl: C ,inr: D ]) ‚âÉ (Œ† A C √ó Œ† B D)
    dist-√ó-Œ†-equiv = equiv (Œª f ‚Üí f ‚àò inl , f ‚àò inr) (Œª fg ‚Üí [inl: fst fg ,inr: snd fg ])
                           (Œª _ ‚Üí idp) (Œª _ ‚Üí Œª= [inl: (Œª _ ‚Üí idp) ,inr: (Œª _ ‚Üí idp) ])

    dist-√ó-Œ† : (Œ† (A ‚äé B) [inl: C ,inr: D ]) ‚â° (Œ† A C √ó Œ† B D)
    dist-√ó-Œ† = ua dist-√ó-Œ†-equiv

module _ {A : ‚òÖ}{B : A ‚Üí ‚òÖ}{C : (x : A) ‚Üí B x ‚Üí ‚òÖ} where
    Œ£-assoc-equiv : (Œ£ A (Œª x ‚Üí Œ£ (B x) (C x))) ‚âÉ (Œ£ (Œ£ A B) (uncurry C))
    Œ£-assoc-equiv = equiv (Œª x ‚Üí (fst x , fst (snd x)) , snd (snd x))
                          (Œª x ‚Üí fst (fst x) , snd (fst x) , snd x)
                          (Œª y ‚Üí idp)
                          (Œª y ‚Üí idp)

    Œ£-assoc : {{_ : UA}} ‚Üí (Œ£ A (Œª x ‚Üí Œ£ (B x) (C x))) ‚â° (Œ£ (Œ£ A B) (uncurry C))
    Œ£-assoc = ua Œ£-assoc-equiv

module _ {A B : ‚òÖ} where
    √ó-comm-equiv : (A √ó B) ‚âÉ (B √ó A)
    √ó-comm-equiv = equiv swap swap (Œª y ‚Üí idp) (Œª x ‚Üí idp)

    √ó-comm : {{_ : UA}} ‚Üí (A √ó B) ‚â° (B √ó A)
    √ó-comm = ua √ó-comm-equiv

    ‚äé-comm-equiv : (A ‚äé B) ‚âÉ (B ‚äé A)
    ‚äé-comm-equiv = equiv [inl: inr ,inr: inl ]
                         [inl: inr ,inr: inl ]
                         [inl: (Œª x ‚Üí idp) ,inr: (Œª x ‚Üí idp) ]
                         [inl: (Œª x ‚Üí idp) ,inr: (Œª x ‚Üí idp) ]

    ‚äé-comm : {{_ : UA}} ‚Üí (A ‚äé B) ‚â° (B ‚äé A)
    ‚äé-comm = ua ‚äé-comm-equiv

module _ {A B : ‚òÖ}{C : A ‚Üí B ‚Üí ‚òÖ} where
    Œ†Œ†-comm-equiv : ((x : A)(y : B) ‚Üí C x y) ‚âÉ ((y : B)(x : A) ‚Üí C x y)
    Œ†Œ†-comm-equiv = equiv flip flip (Œª _ ‚Üí idp) (Œª _ ‚Üí idp)

    Œ†Œ†-comm : {{_ : UA}} ‚Üí ((x : A)(y : B) ‚Üí C x y) ‚â° ((y : B)(x : A) ‚Üí C x y)
    Œ†Œ†-comm = ua Œ†Œ†-comm-equiv

    Œ£Œ£-comm-equiv : (Œ£ A Œª x ‚Üí Œ£ B Œª y ‚Üí C x y) ‚âÉ (Œ£ B Œª y ‚Üí Œ£ A Œª x ‚Üí C x y)
    Œ£Œ£-comm-equiv = equiv (Œª { (x , y , z) ‚Üí y , x , z })
                          (Œª { (x , y , z) ‚Üí y , x , z })
                          (Œª _ ‚Üí idp)
                          (Œª _ ‚Üí idp)

    Œ£Œ£-comm : {{_ : UA}} ‚Üí (Œ£ A Œª x ‚Üí Œ£ B Œª y ‚Üí C x y) ‚â° (Œ£ B Œª y ‚Üí Œ£ A Œª x ‚Üí C x y)
    Œ£Œ£-comm = ua Œ£Œ£-comm-equiv

module _ {A B C : ‚òÖ} where
    √ó-assoc : {{_ : UA}} ‚Üí (A √ó (B √ó C)) ‚â° ((A √ó B) √ó C)
    √ó-assoc = Œ£-assoc

    ‚äé-assoc-equiv : (A ‚äé (B ‚äé C)) ‚âÉ ((A ‚äé B) ‚äé C)
    ‚äé-assoc-equiv = equiv [inl: inl ‚àò inl ,inr: [inl: inl ‚àò inr ,inr: inr ] ]
                          [inl: [inl: inl ,inr: inr ‚àò inl ] ,inr: inr ‚àò inr ]
                          [inl: [inl: (Œª x ‚Üí idp) ,inr: (Œª x ‚Üí idp) ] ,inr: (Œª x ‚Üí idp) ]
                          [inl: (Œª x ‚Üí idp) ,inr: [inl: (Œª x ‚Üí idp) ,inr: (Œª x ‚Üí idp) ] ]

    ‚äé-assoc : {{_ : UA}} ‚Üí (A ‚äé (B ‚äé C)) ‚â° ((A ‚äé B) ‚äé C)
    ‚äé-assoc = ua ‚äé-assoc-equiv

module _ {{_ : UA}}{{_ : FunExt}}(A : ùüò ‚Üí ‚òÖ) where
    Œ†ùüò-uniq : Œ† ùüò A ‚â° ùüô
    Œ†ùüò-uniq = ua (equiv _ (Œª _ ()) (Œª _ ‚Üí idp) (Œª _ ‚Üí Œª= (Œª())))

module _ {{_ : UA}}(A : ùüô ‚Üí ‚òÖ) where
    Œ†ùüô-uniq : Œ† ùüô A ‚â° A _
    Œ†ùüô-uniq = ua (equiv (Œª f ‚Üí f _) (Œª x _ ‚Üí x) (Œª _ ‚Üí idp) (Œª _ ‚Üí idp))

module _ {{_ : UA}}(A : ‚òÖ) where
    Œ†ùüô-uniq‚Ä≤ : (ùüô ‚Üí A) ‚â° A
    Œ†ùüô-uniq‚Ä≤ = Œ†ùüô-uniq (Œª _ ‚Üí A)

module _ {{_ : UA}}{{_ : FunExt}}(A : ‚òÖ) where
    Œ†ùüò-uniq‚Ä≤ : (ùüò ‚Üí A) ‚â° ùüô
    Œ†ùüò-uniq‚Ä≤ = Œ†ùüò-uniq (Œª _ ‚Üí A)

module _ {{_ : FunExt}}(F G : ùüò ‚Üí ‚òÖ) where
    -- also by Œ†ùüò-uniq twice
    Œ†ùüò-uniq' : Œ† ùüò F ‚â° Œ† ùüò G
    Œ†ùüò-uniq' = Œ†=‚Ä≤ ùüò (Œª())

module _ {A : ùüò ‚Üí ‚òÖ} where
    Œ£ùüò-fst-equiv : Œ£ ùüò A ‚âÉ ùüò
    Œ£ùüò-fst-equiv = equiv fst (Œª()) (Œª()) (Œª { (() , _) })

    Œ£ùüò-fst : {{_ : UA}} ‚Üí Œ£ ùüò A ‚â° ùüò
    Œ£ùüò-fst = ua Œ£ùüò-fst-equiv

module _ {A : ùüô ‚Üí ‚òÖ} where
    Œ£ùüô-snd-equiv : Œ£ ùüô A ‚âÉ A _
    Œ£ùüô-snd-equiv = equiv snd (_,_ _) (Œª _ ‚Üí idp) (Œª _ ‚Üí idp)

    Œ£ùüô-snd : {{_ : UA}} ‚Üí Œ£ ùüô A ‚â° A _
    Œ£ùüô-snd = ua Œ£ùüô-snd-equiv

module _ {A : ‚òÖ} where
    ‚äéùüò-inl-equiv : A ‚âÉ (A ‚äé ùüò)
    ‚äéùüò-inl-equiv = equiv inl [inl: id ,inr: (Œª()) ] [inl: (Œª _ ‚Üí idp) ,inr: (Œª()) ] (Œª _ ‚Üí idp)

    ‚äéùüò-inl : {{_ : UA}} ‚Üí A ‚â° (A ‚äé ùüò)
    ‚äéùüò-inl = ua ‚äéùüò-inl-equiv

    ùüô√ó-snd : {{_ : UA}} ‚Üí (ùüô √ó A) ‚â° A
    ùüô√ó-snd = Œ£ùüô-snd

    ùüô√ó-fst : {{_ : UA}} ‚Üí (A √ó ùüô) ‚â° A
    ùüô√ó-fst = √ó-comm ‚àô ùüô√ó-snd

module _ {A : ‚òÖ}{B : A ‚Üí ‚òÖ}{C : Œ£ A B ‚Üí ‚òÖ} where
    -- AC: Dependent axiom of choice
    -- In Type Theory it happens to be neither an axiom nor to be choosing anything.
    Œ†Œ£-comm-equiv : (‚àÄ (x : A) ‚Üí ‚àÉ Œª (y : B x) ‚Üí C (x , y)) ‚âÉ (‚àÉ Œª (f : Œ† A B) ‚Üí ‚àÄ (x : A) ‚Üí C (x , f x))
    Œ†Œ£-comm-equiv = equiv (Œª H ‚Üí fst ‚àò H , snd ‚àò H) (Œª H ‚Üí < fst H , snd H >) (Œª H ‚Üí idp) (Œª H ‚Üí idp)

    Œ†Œ£-comm : {{_ : UA}}
            ‚Üí (‚àÄ (x : A) ‚Üí ‚àÉ Œª (y : B x) ‚Üí C (x , y)) ‚â° (‚àÉ Œª (f : Œ† A B) ‚Üí ‚àÄ (x : A) ‚Üí C (x , f x))
    Œ†Œ£-comm = ua Œ†Œ£-comm-equiv
-- -}
-- -}
-- -}
-- -}
