{-# OPTIONS --without-K #-}
open import Type using (‚òÖ; ‚òÖ_)
open import Data.Maybe.NP using (_‚Üí?_; module M?; just; maybe‚Ä≤; nothing; map?)
open import Data.Nat using (zero; suc)
open import Data.One using (ùüô)
open import Data.Char.NP renaming (_==_ to _==·∂ú_)
open import Data.List as L using (List; []; _‚à∑_; null; filter)
open import Data.Vec using (Vec; []; _‚à∑_)
open import Data.BoundedVec using (BoundedVec) renaming ([] to []·µá·µõ; _‚à∑_ to _‚à∑·µá·µõ_)
open import Data.Product.NP hiding (map)
open import Data.Bool using (Bool; if_then_else_; false)
open import Data.String using (String) renaming (toList to S‚ñπL; fromList to L‚ñπS)
open import Function.NP
open import Level.NP

module Text.Parser where

open M? ‚ÇÄ using () renaming (_=<<_ to _=<<?_; _‚äõ_ to _‚äõ?_; join to join?)

Parser : ‚òÖ ‚Üí ‚òÖ
Parser A = List Char ‚Üí? (A √ó List Char)

pure : ‚àÄ {A} ‚Üí A ‚Üí Parser A
pure a s = just (a , s)

infixr 3 _‚ü®|‚ü©_
_‚ü®|‚ü©_ : ‚àÄ {A} ‚Üí (f g : Parser A) ‚Üí Parser A
_‚ü®|‚ü©_ f g s = maybe‚Ä≤ just (g s) $ f s

empty : ‚àÄ {A} ‚Üí Parser A
empty _ = nothing

sat : (Char ‚Üí Bool) ‚Üí Parser Char
sat pred (x ‚à∑ xs) = (if pred x then pure x else empty) xs
sat _    []       = nothing

eof : Parser ùüô
eof s = if null s then pure _ [] else empty []

-- The remaning input is dropped, you may want to first
-- combine your parser `p' with `eof': `p <* eof'
runParser : ‚àÄ {A} ‚Üí Parser A ‚Üí List Char ‚Üí? A
runParser p s = map? fst (p s)

runParserÀ¢ : ‚àÄ {A} ‚Üí Parser A ‚Üí String ‚Üí? A
runParserÀ¢ p = runParser p ‚àò S‚ñπL

infixr 0 _>>=_
_>>=_ : ‚àÄ {A B} ‚Üí Parser A ‚Üí (A ‚Üí Parser B) ‚Üí Parser B
_>>=_ pa f = maybe‚Ä≤ (uncurry f) nothing ‚àò pa

infixl 0 _=<<_
_=<<_ : ‚àÄ {A B} ‚Üí (A ‚Üí Parser B) ‚Üí Parser A ‚Üí Parser B
_=<<_ f pa = pa >>= f

join : ‚àÄ {A} ‚Üí Parser (Parser A) ‚Üí Parser A
join = _=<<_ id

map : ‚àÄ {A B} ‚Üí (A ‚Üí B) ‚Üí Parser A ‚Üí Parser B
map f pa = pa >>= pure ‚àò f

infixl 4 _‚äõ_ _*>_ _<*_
_‚äõ_ : ‚àÄ {A B} ‚Üí Parser (A ‚Üí B) ‚Üí Parser A ‚Üí Parser B
_‚äõ_ pf pa = pf >>= Œª f ‚Üí pa >>= Œª a ‚Üí pure (f a)

‚ü™_¬∑_‚ü´ : ‚àÄ {A B} ‚Üí (A ‚Üí B) ‚Üí Parser A ‚Üí Parser B
‚ü™ f ¬∑ x ‚ü´ = map f x

‚ü™_¬∑_¬∑_‚ü´ : ‚àÄ {A B C} ‚Üí
            (A ‚Üí B ‚Üí C) ‚Üí Parser A ‚Üí Parser B ‚Üí Parser C
‚ü™ f ¬∑ x ¬∑ y ‚ü´ = map f x ‚äõ y

‚ü™_¬∑_¬∑_¬∑_‚ü´ : ‚àÄ {A B C D} ‚Üí (A ‚Üí B ‚Üí C ‚Üí D)
            ‚Üí Parser A ‚Üí Parser B ‚Üí Parser C ‚Üí Parser D
‚ü™ f ¬∑ x ¬∑ y ¬∑ z ‚ü´ = map f x ‚äõ y ‚äõ z

_*>_ : ‚àÄ {A B} ‚Üí Parser A ‚Üí Parser B ‚Üí Parser B
p‚ÇÅ *> p‚ÇÇ = p‚ÇÅ >>= const p‚ÇÇ

_<*_ : ‚àÄ {A B} ‚Üí Parser A ‚Üí Parser B ‚Üí Parser A
p‚ÇÅ <* p‚ÇÇ = p‚ÇÅ >>= Œª x ‚Üí p‚ÇÇ *> pure x

mapM : ‚àÄ {a} {A : ‚òÖ_ a} {B} ‚Üí (A ‚Üí Parser B) ‚Üí List A ‚Üí Parser (List B)
mapM f []       = pure []
mapM f (x ‚à∑ xs) = ‚ü™ _‚à∑_ ¬∑ f x ¬∑ mapM f xs ‚ü´

mapMvoid : ‚àÄ {a} {A : ‚òÖ_ a} {B} ‚Üí (A ‚Üí Parser B) ‚Üí List A ‚Üí Parser ùüô
mapMvoid f []       = pure _
mapMvoid f (x ‚à∑ xs) = f x *> mapMvoid f xs

choices : ‚àÄ {A} ‚Üí List (Parser A) ‚Üí Parser A
choices = L.foldr _‚ü®|‚ü©_ empty

vec : ‚àÄ {A} n ‚Üí Parser A ‚Üí Parser (Vec A n)
vec zero    p = pure []
vec (suc n) p = ‚ü™ _‚à∑_ ¬∑ p ¬∑ vec n p ‚ü´

-- These are producing bounded vectors mainly for termination
-- reasons.
manyBV : ‚àÄ {A} n ‚Üí Parser A ‚Üí Parser (BoundedVec A n)
someBV : ‚àÄ {A} n ‚Üí Parser A ‚Üí Parser (BoundedVec A (suc n))

manyBV 0       _ = empty
manyBV (suc n) p = someBV n p ‚ü®|‚ü© pure []·µá·µõ

someBV n p = ‚ü™ _‚à∑·µá·µõ_ ¬∑ p ¬∑ manyBV n p ‚ü´

many : ‚àÄ {A} n ‚Üí Parser A ‚Üí Parser (List A)
some : ‚àÄ {A} n ‚Üí Parser A ‚Üí Parser (List A)

many 0       _ = empty
many (suc n) p = some n p ‚ü®|‚ü© pure []

some n p = ‚ü™ _‚à∑_ ¬∑ p ¬∑ many n p ‚ü´

manySat : (Char ‚Üí Bool) ‚Üí Parser (List Char)
manySat p []       = pure [] []
manySat p (x ‚à∑ xs) = if p x then map? (first (_‚à∑_ x)) (manySat p xs) else pure [] (x ‚à∑ xs)

manySatÀ¢ : (Char ‚Üí Bool) ‚Üí Parser String
manySatÀ¢ = map L‚ñπS ‚àò manySat

someSat : (Char ‚Üí Bool) ‚Üí Parser (List Char)
someSat p = pure _‚à∑_ ‚äõ sat p ‚äõ manySat p

someSatÀ¢ : (Char ‚Üí Bool) ‚Üí Parser String
someSatÀ¢ = map L‚ñπS ‚àò someSat

char : Char ‚Üí Parser ùüô
char c = sat (_==·∂ú_ c) *> pure _

string : String ‚Üí Parser ùüô
string = mapMvoid char ‚àò S‚ñπL

oneOf : List Char ‚Üí Parser Char
oneOf cs = sat (Œª c ‚Üí c `elem` cs)

oneOfÀ¢ : String ‚Üí Parser Char
oneOfÀ¢ = oneOf ‚àò S‚ñπL

noneOf : List Char ‚Üí Parser Char
noneOf cs = sat (Œª c ‚Üí c `notElem` cs)

noneOfÀ¢ : String ‚Üí Parser Char
noneOfÀ¢ = noneOf ‚àò S‚ñπL

someOneOf : List Char ‚Üí Parser (List Char)
someOneOf cs = someSat (Œª c ‚Üí c `elem` cs)

someOneOfÀ¢ : String ‚Üí Parser String
someOneOfÀ¢ = map L‚ñπS ‚àò someOneOf ‚àò S‚ñπL

someNoneOf : List Char ‚Üí Parser (List Char)
someNoneOf cs = someSat (Œª c ‚Üí c `notElem` cs)

someNoneOfÀ¢ : String ‚Üí Parser String
someNoneOfÀ¢ = map L‚ñπS ‚àò someNoneOf ‚àò S‚ñπL

manyOneOf : List Char ‚Üí Parser (List Char)
manyOneOf cs = manySat (Œª c ‚Üí c `elem` cs)

manyOneOfÀ¢ : String ‚Üí Parser String
manyOneOfÀ¢ = map L‚ñπS ‚àò manyOneOf ‚àò S‚ñπL

manyNoneOf : List Char ‚Üí Parser (List Char)
manyNoneOf cs = manySat (Œª c ‚Üí c `notElem` cs)

manyNoneOfÀ¢ : String ‚Üí Parser String
manyNoneOfÀ¢ = map L‚ñπS ‚àò manyNoneOf ‚àò S‚ñπL

lookSat : (List Char ‚Üí Bool) ‚Üí Parser ùüô
lookSat p xs = if p xs then just (_ , xs) else nothing

lookSatHead : (Char ‚Üí Bool) ‚Üí Parser ùüô
lookSatHead p·∂ú = lookSat p
    where p : List Char ‚Üí Bool
          p (x ‚à∑ xs) = p·∂ú x
          p []       = false

lookHeadNoneOf : List Char ‚Üí Parser ùüô
lookHeadNoneOf cs = lookSatHead (Œª c ‚Üí c `notElem` cs)

lookHeadNoneOfÀ¢ : String ‚Üí Parser ùüô
lookHeadNoneOfÀ¢ = lookHeadNoneOf ‚àò S‚ñπL

lookHeadSomeOf : List Char ‚Üí Parser ùüô
lookHeadSomeOf cs = lookSatHead (Œª c ‚Üí c `elem` cs)

lookHeadSomeOfÀ¢ : String ‚Üí Parser ùüô
lookHeadSomeOfÀ¢ = lookHeadSomeOf ‚àò S‚ñπL

module _ {A} where
    between : ‚àÄ {_V} (begin end : Parser _V) ‚Üí Endo (Parser A)
    between begin end p = begin *> p <* end

    between·∂ú : (begin end : Char) ‚Üí Endo (Parser A)
    between·∂ú begin end = between (char begin) (char end)

    betweenÀ¢ : (begin end : String) ‚Üí Endo (Parser A)
    betweenÀ¢ begin end = between (string begin) (string end)

    parens   = between·∂ú '(' ')'
    braces   = between·∂ú '{' '}'
    brackets = between·∂ú '[' ']'
    angles   = between·∂ú '<' '>'
    oxford   = between·∂ú '‚ü¶' '‚üß'
